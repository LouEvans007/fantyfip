// backend/routes/journalRoutes.js
import express from 'express';
import { verifyToken } from '../middlewares/verifyToken.js';
import { requirePlan } from '../middlewares/requirePlan.js'; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º requirePlan
import { celebrate } from 'celebrate';

// Controllers
import {
  getJournalEntries,
  createJournalEntry,
  getJournalInsights,
  getJournalEntry,
  updateJournalEntry,
  deleteJournalEntry,
  reprocessJournalEntries,
  reprocessSingleEntry,
} from '../controllers/journalController.js';

import { getWordCloudData } from '../controllers/moodController.js';

// Validators
import {
  create as validateCreate,
  update as validateUpdate,
  reprocess as validateReprocess
} from '../validators/journal.js';

const router = express.Router();

// –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.use(verifyToken);

// === Journal API ===

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
router.get('/', getJournalEntries);

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
router.post('/', celebrate(validateCreate), createJournalEntry);

// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É (–∏–Ω—Å–∞–π—Ç—ã)
router.get('/insights', requirePlan('basic'), getJournalInsights); // üîí Standard –∏–ª–∏ Premium

// –ü–µ—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –≤—Å–µ—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
router.post('/reprocess', requirePlan('basic'), reprocessJournalEntries); // üîí –¢–æ–ª—å–∫–æ Premium

// Word cloud –¥–∞–Ω–Ω—ã–µ
router.get('/wordcloud', requirePlan('basic'), getWordCloudData); // üîí Standard –∏–ª–∏ –≤—ã—à–µ

// === Single Entry Routes ===

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ ID
router.get('/:id', getJournalEntry);

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
router.put('/:id', celebrate(validateUpdate), updateJournalEntry);

// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
router.delete('/:id', deleteJournalEntry);

// –ü–µ—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
router.post('/:id/reprocess', celebrate(validateReprocess), reprocessSingleEntry);

// === very light status check ======================================
router.get('/:id/status', verifyToken, async (req, res) => {
  const { id } = req.params;
  const entry = await JournalEntry.findOne(
    { _id: id, userId: req.user.id },
    'analysis.processed'
  );
  if (!entry) return res.status(404).end();
  res.json({ processed: !!entry.analysis?.processed });
});

// –≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
export default router;
