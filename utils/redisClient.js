// backend/utils/redisClient.js

import { createClient } from 'redis';

let redisClient = null;

/**
 * –°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Redis.
 * –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä.
 */
export const getRedisClient = async () => {
  if (!redisClient) {
    // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const redisUrl = process.env.REDIS_URL;

    if (!redisUrl) {
      throw new Error('REDIS_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    redisClient = createClient({
      url: redisUrl,
      socket: {
        reconnectStrategy: (retries) => {
          if (retries > 5) {
            console.error('Maximum Redis reconnection attempts reached');
            return new Error('Redis connection lost');
          }
          return Math.min(retries * 100, 2000);
        },
      },
      tls: {}, // TLS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ rediss://
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    redisClient.on('error', (err) => {
      console.error('Redis client error:', err.message);
    });

    redisClient.on('connect', () => {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis (Upstash)');
    });

    redisClient.on('reconnecting', () => {
      console.warn('üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...');
    });

    redisClient.on('end', () => {
      console.log('üîö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ');
    });

    try {
      await redisClient.connect();
    } catch (err) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis:', err.message);
      redisClient = null; // –°–±—Ä–æ—Å–∏–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      throw err;
    }
  }

  return redisClient;
};
